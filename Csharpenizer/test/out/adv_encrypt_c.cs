// generated by Csharpenizer (http://www.color-of-code.de)
#region Namespace wrapping
//css_reference stdc.dll;
using stdc;

namespace main {
  public partial class Program {
#endregion

// File Encryption Program in C.

/*		 WARNING : do not give the have the same sourcefile anddestinationfile, encrypting or decrypting, this bug will be workedout as i get more interested in file encryption*/

// #include <stdio.h>

// #define ENCRYPTION_FORMULA  (int) Byte + 25
// #define DECRYPTION_FORMULA  (int) Byte - 25

int Encrypt(char * FILENAME, char * NEW_FILENAME)
{
	//printf("Loaded Encrypt");
	C.FILEinFile;		 		 		 		 		 //Declare inFile
	C.FILEoutFile;		 		 		 		 		 //Declare outFile

	char Byte;
	char newByte;
	int n;
	int i=0;


	C.printf("1");

	inFile = C.fopen(FILENAME,"rb");
	outFile = C.fopen(NEW_FILENAME, "w");

	if(inFile==C.NULL)
		C.printf("Error: Can't Open inFile");

	if(outFile==C.NULL)
	{
		C.printf("Error: Can't open outFile.");
		return 1;
	}
	else
	{
		C.printf("File Opened, Encrypting");
		while(1)
		{
			C.printf(".");

			if(Byte!=EOF)
			{
				Byte=C.fgetc(inFile);
				//		 printf("%d",Byte);
				newByte=Byte+25;

				C.fputc(newByte,outFile);
			}
			else
			{
				C.printf("End of File");
					break;
			}
		}
		C.fclose(inFile);
		C.fclose(outFile);
	}
}

int Decrypt (char *FILENAME, char *NEW_FILENAME)
{
	//printf("Loaded Decrypt");
	C.FILEinFile;		 		 		 		 		 //Declare inFile
	C.FILEoutFile;		 		 		 		 		 //Declare outFile

	char Byte;
	char newByte;
	int i=0;

	C.printf("2");

	inFile = C.fopen(FILENAME,"rb");
	outFile = C.fopen(NEW_FILENAME, "w");

	if(inFile==C.NULL)
		C.printf("Error: Can't Open inFile");

	if(outFile==C.NULL)
	{
		C.printf("Error: Can't open outFile.");
		return 1;
	}
	else
	{

		C.printf("File Opened, Decrypting");
		while(1)
		{
			C.printf(".");

			if(Byte!=EOF)
			{
				Byte=C.fgetc(inFile);
				//		 printf("%d",Byte);
				newByte=Byte-25;

				C.fputc(newByte,outFile);
			}
			else
			{
				C.printf("End of File");
					break;
			}
		}
		C.fclose(inFile);
		C.fclose(outFile);
	}
}

int main()
{
	char[] encFile = new char[200];
	char[] newencFile = new char[200];
	char[] decFile = new char[200];
	char[] newdecFile = new char[200];

	int choice;

	C.printf("NOTE: you must Decrypt the file with the same file extension!!!");
	C.printf("Enter 1 to Encrypt  / 2 to Decrypt");
	C.scanf("%d",out choice);

	switch(choice)
	{
	case 1:
		C.printf("Enter the Source Filename:  ");
		C.scanf("%s",out encFile);
		C.printf("Enter the Destination Filename:   ");
		C.scanf("%s",out newencFile);
		Encrypt(encFile, newencFile);
		break;
	case 2:
		C.printf("Enter the Source Filename:   ");
		C.scanf("%s",out decFile);
		C.printf("Enter the Destination Filename:   ");
		C.scanf("%s",out newdecFile);
		Decrypt(decFile, newdecFile);
		break;
	}
	return 0;
}



    #region Main trampoline
    static int Main (string[] args) {
      Program p = new Program();
      return C.RunIMain (args, p.main);
    }
    #endregion
#region Namespace wrapping
  }
}
#endregion
