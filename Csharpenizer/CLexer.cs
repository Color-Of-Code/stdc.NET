//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.0.0.0
//  Machine:  gest4425
//  UserName: jdehaan
//  GPLEX input file <CLexer.lex - 3/21/19 10:01:26 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, noParser, noFiles, stack, minimize
//  Option settings: compressNext,
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define STANDALONE
#define NOFILES
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using System.Text.RegularExpressions;
using QUT.Gplib;

namespace CLexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private IScanBuffer buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private IScanBuffer buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public IScanBuffer Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 50;
        const int initial = 51;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int StringLiteral = 1;
        const int LineComment = 2;
        const int StreamComment = 3;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {51, 167, 168, 169, 0};

    static Table[] NxS = new Table[170] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   3] */ // Shortest string "\r"
      new Table(10, 1, -1, new short[] {2}),
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "\""
/* NxS[   5] */ // Shortest string "#"
      new Table(10, 4, 5, new short[] {-1, 5, 5, -1}),
/* NxS[   6] */ // Shortest string "&"
      new Table(9, 114, -1, new short[] {166, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 166, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, -1, -1, -1, 
          40, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40}),
/* NxS[   7] */ // Shortest string "("
      new Table(9, 110, -1, new short[] {161, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 162}),
/* NxS[   8] */ // Shortest string "*"
      new Table(9, 32, -1, new short[] {156, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 156, -1, -1, -1, -1, -1, -1, -1, 157}),
/* NxS[   9] */ // Shortest string "/"
      new Table(42, 6, -1, new short[] {35, -1, -1, -1, -1, 36}),
/* NxS[  10] */ // Shortest string "F"
      new Table(73, 1, -1, new short[] {153}),
/* NxS[  11] */ // Shortest string "N"
      new Table(85, 1, -1, new short[] {151}),
/* NxS[  12] */ // Shortest string "a"
      new Table(116, 1, -1, new short[] {149}),
/* NxS[  13] */ // Shortest string "c"
      new Table(104, 8, -1, new short[] {112, -1, -1, -1, 113, -1, 
          -1, 114}),
/* NxS[  14] */ // Shortest string "e"
      new Table(120, 1, -1, new short[] {111}),
/* NxS[  15] */ // Shortest string "f"
      new Table(99, 14, -1, new short[] {106, -1, -1, -1, 107, -1, 
          -1, -1, -1, -1, -1, -1, 108, 109}),
/* NxS[  16] */ // Shortest string "g"
      new Table(101, 1, -1, new short[] {103}),
/* NxS[  17] */ // Shortest string "i"
      new Table(110, 1, -1, new short[] {93}),
/* NxS[  18] */ // Shortest string "p"
      new Table(114, 4, -1, new short[] {79, -1, -1, 91}),
/* NxS[  19] */ // Shortest string "q"
      new Table(115, 1, -1, new short[] {89}),
/* NxS[  20] */ // Shortest string "r"
      new Table(97, 1, -1, new short[] {87}),
/* NxS[  21] */ // Shortest string "s"
      new Table(99, 18, -1, new short[] {61, -1, -1, -1, -1, -1, 
          62, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 65}),
/* NxS[  22] */ // Shortest string "t"
      new Table(105, 1, -1, new short[] {59}),
/* NxS[  23] */ // Shortest string "v"
      new Table(111, 1, -1, new short[] {52}),
/* NxS[  24] */ new Table(0, 0, -1, null), // Shortest string "void\t*"
/* NxS[  25] */ new Table(0, 0, -1, null), // Shortest string "void\tmain"
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string "NULL"
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string "struct\tA\x01"
/* NxS[  28] */ // Shortest string "struct\tA\t"
      new Table(9, 115, 27, new short[] {28, -1, 27, 27, -1, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1}),
/* NxS[  29] */ // Shortest string "struct\tA0"
      new Table(9, 115, 27, new short[] {28, -1, 27, 27, -1, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 27, 27, 27, 
          27, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
          29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 27, 27, 
          29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
          29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, -1}),
/* NxS[  30] */ // Shortest string "int\tmain"
      new Table(9, 114, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[  31] */ new Table(0, 0, -1, null), // Shortest string "int\tA[]="
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "char\tA[]="
/* NxS[  33] */ new Table(0, 0, -1, null), // Shortest string "char\tA[];"
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string "FILE*"
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "//"
/* NxS[  37] */ new Table(0, 0, -1, null), // Shortest string "*(A*)"
/* NxS[  38] */ new Table(0, 0, -1, null), // Shortest string "(void)"
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[  40] */ // Shortest string "&A"
      new Table(48, 75, -1, new short[] {40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, -1, -1, -1, -1, 40, -1, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  42] */ new Table(0, 0, -1, null), // Shortest string "\""
/* NxS[  43] */ // Shortest string "\\"
      new Table(34, 1, -1, new short[] {44}),
/* NxS[  44] */ new Table(0, 0, -1, null), // Shortest string "\\\""
/* NxS[  45] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  46] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[  47] */ // Shortest string "\r"
      new Table(10, 1, -1, new short[] {46}),
/* NxS[  48] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  49] */ // Shortest string "*"
      new Table(47, 1, -1, new short[] {50}),
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[  51] */ // Shortest string ""
      new Table(10, 109, 1, new short[] {2, 1, 1, 3, 1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 4, 5, 1, 1, 6, 1, 7, 1, 8, 1, 1, 1, 1, 9, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 1, 1, 1, 11, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, 12, 1, 13, 1, 14, 15, 16, 1, 17, 1, 1, 1, 1, 1, 1, 
          18, 19, 20, 21, 22, 1, 23}),
/* NxS[  52] */ // Shortest string "vo"
      new Table(105, 1, -1, new short[] {53}),
/* NxS[  53] */ // Shortest string "voi"
      new Table(100, 1, -1, new short[] {54}),
/* NxS[  54] */ // Shortest string "void"
      new Table(9, 24, -1, new short[] {55, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 55}),
/* NxS[  55] */ // Shortest string "void\t"
      new Table(9, 101, -1, new short[] {55, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56}),
/* NxS[  56] */ // Shortest string "void\tm"
      new Table(97, 1, -1, new short[] {57}),
/* NxS[  57] */ // Shortest string "void\tma"
      new Table(105, 1, -1, new short[] {58}),
/* NxS[  58] */ // Shortest string "void\tmai"
      new Table(110, 1, -1, new short[] {25}),
/* NxS[  59] */ // Shortest string "ti"
      new Table(109, 1, -1, new short[] {60}),
/* NxS[  60] */ // Shortest string "tim"
      new Table(101, 1, -1, new short[] {26}),
/* NxS[  61] */ // Shortest string "sc"
      new Table(97, 1, -1, new short[] {86}),
/* NxS[  62] */ // Shortest string "si"
      new Table(103, 1, -1, new short[] {83}),
/* NxS[  63] */ // Shortest string "sp"
      new Table(114, 1, -1, new short[] {79}),
/* NxS[  64] */ // Shortest string "sr"
      new Table(97, 1, -1, new short[] {77}),
/* NxS[  65] */ // Shortest string "st"
      new Table(114, 1, -1, new short[] {66}),
/* NxS[  66] */ // Shortest string "str"
      new Table(99, 19, -1, new short[] {67, -1, -1, -1, -1, -1, 
          -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, 69}),
/* NxS[  67] */ // Shortest string "strc"
      new Table(97, 16, -1, new short[] {75, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 76}),
/* NxS[  68] */ // Shortest string "fop"
      new Table(101, 1, -1, new short[] {74}),
/* NxS[  69] */ // Shortest string "stru"
      new Table(99, 1, -1, new short[] {70}),
/* NxS[  70] */ // Shortest string "struc"
      new Table(116, 1, -1, new short[] {71}),
/* NxS[  71] */ // Shortest string "struct"
      new Table(9, 24, -1, new short[] {72, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 72}),
/* NxS[  72] */ // Shortest string "struct\t"
      new Table(9, 114, -1, new short[] {72, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 
          73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, -1, -1, -1, -1, 
          73, -1, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 
          73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73}),
/* NxS[  73] */ // Shortest string "struct\tA"
      new Table(9, 115, 27, new short[] {28, -1, 27, 27, -1, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 27, 27, 27, 
          27, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
          29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 27, 27, 
          29, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
          29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, -1}),
/* NxS[  74] */ // Shortest string "fope"
      new Table(110, 1, -1, new short[] {26}),
/* NxS[  75] */ // Shortest string "exi"
      new Table(116, 1, -1, new short[] {26}),
/* NxS[  76] */ // Shortest string "strcp"
      new Table(121, 1, -1, new short[] {26}),
/* NxS[  77] */ // Shortest string "sra"
      new Table(110, 1, -1, new short[] {78}),
/* NxS[  78] */ // Shortest string "ran"
      new Table(100, 1, -1, new short[] {26}),
/* NxS[  79] */ // Shortest string "pr"
      new Table(105, 1, -1, new short[] {80}),
/* NxS[  80] */ // Shortest string "pri"
      new Table(110, 1, -1, new short[] {81}),
/* NxS[  81] */ // Shortest string "prin"
      new Table(116, 1, -1, new short[] {82}),
/* NxS[  82] */ // Shortest string "scan"
      new Table(102, 1, -1, new short[] {26}),
/* NxS[  83] */ // Shortest string "sig"
      new Table(110, 1, -1, new short[] {84}),
/* NxS[  84] */ // Shortest string "sign"
      new Table(97, 1, -1, new short[] {85}),
/* NxS[  85] */ // Shortest string "signa"
      new Table(108, 1, -1, new short[] {26}),
/* NxS[  86] */ // Shortest string "sca"
      new Table(110, 1, -1, new short[] {82}),
/* NxS[  87] */ // Shortest string "ra"
      new Table(105, 6, -1, new short[] {88, -1, -1, -1, -1, 78}),
/* NxS[  88] */ // Shortest string "rai"
      new Table(115, 1, -1, new short[] {60}),
/* NxS[  89] */ // Shortest string "qs"
      new Table(111, 1, -1, new short[] {90}),
/* NxS[  90] */ // Shortest string "qso"
      new Table(114, 1, -1, new short[] {75}),
/* NxS[  91] */ // Shortest string "pu"
      new Table(116, 1, -1, new short[] {92}),
/* NxS[  92] */ // Shortest string "put"
      new Table(99, 17, -1, new short[] {26, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26}),
/* NxS[  93] */ // Shortest string "in"
      new Table(116, 1, -1, new short[] {94}),
/* NxS[  94] */ // Shortest string "int"
      new Table(9, 24, -1, new short[] {95, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 95}),
/* NxS[  95] */ // Shortest string "int\t"
      new Table(9, 114, -1, new short[] {95, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[  96] */ // Shortest string "int\tA"
      new Table(9, 114, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[  97] */ // Shortest string "int\tm"
      new Table(9, 114, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99, -1, -1, -1, 
          96, -1, 100, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[  98] */ // Shortest string "int\tA\t"
      new Table(9, 83, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99}),
/* NxS[  99] */ // Shortest string "int\tA["
      new Table(93, 1, 99, new short[] {102}),
/* NxS[ 100] */ // Shortest string "int\tma"
      new Table(9, 114, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 101, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[ 101] */ // Shortest string "int\tmai"
      new Table(9, 114, -1, new short[] {98, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 30, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[ 102] */ // Shortest string "int\tA[]"
      new Table(9, 53, -1, new short[] {102, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31}),
/* NxS[ 103] */ // Shortest string "ge"
      new Table(116, 1, -1, new short[] {104}),
/* NxS[ 104] */ // Shortest string "get"
      new Table(99, 17, -1, new short[] {105, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26}),
/* NxS[ 105] */ // Shortest string "getc"
      new Table(104, 1, -1, new short[] {26}),
/* NxS[ 106] */ // Shortest string "fc"
      new Table(108, 1, -1, new short[] {110}),
/* NxS[ 107] */ // Shortest string "fg"
      new Table(101, 1, -1, new short[] {91}),
/* NxS[ 108] */ // Shortest string "fo"
      new Table(112, 1, -1, new short[] {68}),
/* NxS[ 109] */ // Shortest string "fp"
      new Table(114, 4, -1, new short[] {79, -1, -1, 91}),
/* NxS[ 110] */ // Shortest string "fcl"
      new Table(111, 1, -1, new short[] {88}),
/* NxS[ 111] */ // Shortest string "ex"
      new Table(105, 1, -1, new short[] {75}),
/* NxS[ 112] */ // Shortest string "ch"
      new Table(97, 1, -1, new short[] {140}),
/* NxS[ 113] */ // Shortest string "cl"
      new Table(114, 1, -1, new short[] {137}),
/* NxS[ 114] */ // Shortest string "co"
      new Table(110, 1, -1, new short[] {115}),
/* NxS[ 115] */ // Shortest string "con"
      new Table(115, 1, -1, new short[] {116}),
/* NxS[ 116] */ // Shortest string "cons"
      new Table(116, 1, -1, new short[] {117}),
/* NxS[ 117] */ // Shortest string "const"
      new Table(9, 24, -1, new short[] {118, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 118}),
/* NxS[ 118] */ // Shortest string "const\t"
      new Table(9, 110, -1, new short[] {118, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 119, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 121}),
/* NxS[ 119] */ // Shortest string "const\tc"
      new Table(104, 1, -1, new short[] {129}),
/* NxS[ 120] */ // Shortest string "const\ti"
      new Table(110, 1, -1, new short[] {126}),
/* NxS[ 121] */ // Shortest string "const\tv"
      new Table(111, 1, -1, new short[] {122}),
/* NxS[ 122] */ // Shortest string "const\tvo"
      new Table(105, 1, -1, new short[] {123}),
/* NxS[ 123] */ // Shortest string "const\tvoi"
      new Table(100, 1, -1, new short[] {124}),
/* NxS[ 124] */ // Shortest string "const\tvoid"
      new Table(9, 24, -1, new short[] {125, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 125}),
/* NxS[ 125] */ // Shortest string "const\tvoid\t"
      new Table(9, 34, -1, new short[] {125, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24}),
/* NxS[ 126] */ // Shortest string "const\tin"
      new Table(116, 1, -1, new short[] {127}),
/* NxS[ 127] */ // Shortest string "const\tint"
      new Table(9, 24, -1, new short[] {128, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 128}),
/* NxS[ 128] */ // Shortest string "const\tint\t"
      new Table(9, 114, -1, new short[] {128, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1, -1, -1, -1, 
          96, -1, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96}),
/* NxS[ 129] */ // Shortest string "const\tch"
      new Table(97, 1, -1, new short[] {130}),
/* NxS[ 130] */ // Shortest string "const\tcha"
      new Table(114, 1, -1, new short[] {131}),
/* NxS[ 131] */ // Shortest string "const\tchar"
      new Table(9, 24, -1, new short[] {132, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 132}),
/* NxS[ 132] */ // Shortest string "const\tchar\t"
      new Table(9, 114, -1, new short[] {132, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, -1, -1, -1, -1, 
          133, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133}),
/* NxS[ 133] */ // Shortest string "const\tchar\tA"
      new Table(9, 114, -1, new short[] {134, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, -1, -1, -1, -1, -1, 
          -1, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 135, -1, -1, -1, 
          133, -1, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 
          133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133}),
/* NxS[ 134] */ // Shortest string "const\tchar\tA\t"
      new Table(9, 83, -1, new short[] {134, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135}),
/* NxS[ 135] */ // Shortest string "const\tchar\tA["
      new Table(9, 85, -1, new short[] {135, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136}),
/* NxS[ 136] */ // Shortest string "char\tA[]\t"
      new Table(9, 53, -1, new short[] {136, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32}),
/* NxS[ 137] */ // Shortest string "clr"
      new Table(115, 1, -1, new short[] {138}),
/* NxS[ 138] */ // Shortest string "clrs"
      new Table(99, 1, -1, new short[] {139}),
/* NxS[ 139] */ // Shortest string "clrsc"
      new Table(114, 1, -1, new short[] {26}),
/* NxS[ 140] */ // Shortest string "cha"
      new Table(114, 1, -1, new short[] {141}),
/* NxS[ 141] */ // Shortest string "char"
      new Table(9, 24, -1, new short[] {142, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 142}),
/* NxS[ 142] */ // Shortest string "char\t"
      new Table(9, 114, -1, new short[] {142, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 142, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 
          143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, -1, -1, -1, -1, 
          143, -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 
          143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143}),
/* NxS[ 143] */ // Shortest string "char\tA"
      new Table(9, 114, -1, new short[] {144, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, -1, -1, -1, -1, -1, 
          -1, -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 
          143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 145, -1, -1, -1, 
          143, -1, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 
          143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143}),
/* NxS[ 144] */ // Shortest string "char\tA\t"
      new Table(9, 83, -1, new short[] {144, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 145}),
/* NxS[ 145] */ // Shortest string "char\tA["
      new Table(9, 85, 146, new short[] {145, 146, 146, 146, 146, 146, 
          146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 
          146, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 
          146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 
          146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 
          146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147}),
/* NxS[ 146] */ // Shortest string "char\tA[\x01"
      new Table(93, 1, 146, new short[] {148}),
/* NxS[ 147] */ // Shortest string "char\tA[]"
      new Table(9, 53, -1, new short[] {136, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, 32}),
/* NxS[ 148] */ // Shortest string "char\tA[\x01]"
      new Table(59, 1, -1, new short[] {33}),
/* NxS[ 149] */ // Shortest string "at"
      new Table(101, 1, -1, new short[] {150}),
/* NxS[ 150] */ // Shortest string "ate"
      new Table(120, 1, -1, new short[] {111}),
/* NxS[ 151] */ // Shortest string "NU"
      new Table(76, 1, -1, new short[] {152}),
/* NxS[ 152] */ // Shortest string "NUL"
      new Table(76, 1, -1, new short[] {26}),
/* NxS[ 153] */ // Shortest string "FI"
      new Table(76, 1, -1, new short[] {154}),
/* NxS[ 154] */ // Shortest string "FIL"
      new Table(69, 1, -1, new short[] {155}),
/* NxS[ 155] */ // Shortest string "FILE"
      new Table(9, 34, -1, new short[] {155, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34}),
/* NxS[ 156] */ // Shortest string "*\t"
      new Table(9, 32, -1, new short[] {156, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 156, -1, -1, -1, -1, -1, -1, -1, 157}),
/* NxS[ 157] */ // Shortest string "*("
      new Table(9, 114, -1, new short[] {157, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 
          158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, -1, -1, -1, -1, 
          158, -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 
          158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158}),
/* NxS[ 158] */ // Shortest string "*(A"
      new Table(9, 114, -1, new short[] {159, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, -1, -1, -1, -1, 
          -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, -1, -1, -1, -1, -1, 
          -1, -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 
          158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, -1, -1, -1, -1, 
          158, -1, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 
          158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158}),
/* NxS[ 159] */ // Shortest string "*(A\t"
      new Table(9, 34, -1, new short[] {159, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160}),
/* NxS[ 160] */ // Shortest string "*(A*"
      new Table(9, 33, -1, new short[] {160, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 160, -1, -1, -1, -1, -1, -1, -1, -1, 37}),
/* NxS[ 161] */ // Shortest string "(\t"
      new Table(9, 110, -1, new short[] {161, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 162}),
/* NxS[ 162] */ // Shortest string "(v"
      new Table(111, 1, -1, new short[] {163}),
/* NxS[ 163] */ // Shortest string "(vo"
      new Table(105, 1, -1, new short[] {164}),
/* NxS[ 164] */ // Shortest string "(voi"
      new Table(100, 1, -1, new short[] {165}),
/* NxS[ 165] */ // Shortest string "(void"
      new Table(9, 33, -1, new short[] {165, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 165, -1, -1, -1, -1, -1, -1, -1, -1, 38}),
/* NxS[ 166] */ // Shortest string "&\t"
      new Table(9, 114, -1, new short[] {166, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, -1, -1, -1, 
          40, -1, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
          40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40}),
/* NxS[ 167] */ // Shortest string ""
      new Table(10, 83, 41, new short[] {-1, 41, 41, 41, 41, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, 41, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43}),
/* NxS[ 168] */ // Shortest string ""
      new Table(10, 4, 45, new short[] {46, 45, 45, 47}),
/* NxS[ 169] */ // Shortest string ""
      new Table(10, 33, 48, new short[] {-1, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49}),
    };

int NextState() {
    if (code == ScanBuffCode.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal IScanBuffer buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file); // no unicode option
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuffCode.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuffCode.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBufferFactory.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBufferFactory.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBufferFactory.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBufferFactory.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuffCode.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 169:
throw new Exception("comment is unterminated");
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '.',	Shortest string "\x01"
        case 6: // Recognized '.',	Shortest string "&"
        case 7: // Recognized '.',	Shortest string "("
        case 8: // Recognized '.',	Shortest string "*"
        case 9: // Recognized '.',	Shortest string "/"
        case 10: // Recognized '.',	Shortest string "F"
        case 11: // Recognized '.',	Shortest string "N"
        case 12: // Recognized '.',	Shortest string "a"
        case 13: // Recognized '.',	Shortest string "c"
        case 14: // Recognized '.',	Shortest string "e"
        case 15: // Recognized '.',	Shortest string "f"
        case 16: // Recognized '.',	Shortest string "g"
        case 17: // Recognized '.',	Shortest string "i"
        case 18: // Recognized '.',	Shortest string "p"
        case 19: // Recognized '.',	Shortest string "q"
        case 20: // Recognized '.',	Shortest string "r"
        case 21: // Recognized '.',	Shortest string "s"
        case 22: // Recognized '.',	Shortest string "t"
        case 23: // Recognized '.',	Shortest string "v"
Text.Append(yytext);
            break;
        case 2: // Recognized '\n',	Shortest string "\n"
        case 3: // Recognized '\r',	Shortest string "\r"
Text.AppendLine();
            break;
        case 4: // Recognized '\"',	Shortest string "\""
/*Text.Append("<str>");*/ Text.Append(yytext); yy_push_state(StringLiteral);
            break;
        case 5: // Recognized '#[^\r\n]*',	Shortest string "#"
Text.Append("// "); Text.Append(yytext);
            break;
        case 24: // Recognized '{CONST}?void{WS}+{STAR}',	Shortest string "void\t*"
Text.Append("object");
            break;
        case 25: // Recognized 'void{WS}+main',	Shortest string "void\tmain"
ContainsVMain = true; Text.Append(yytext);
            break;
        case 26: // Recognized 'time',	Shortest string "NULL"
Text.Append("C."); Text.Append(yytext);
            break;
        case 27: // Recognized 'struct{WS}+{IDENTIFIER}{WS}*[^{\r\n]',	Shortest string "struct\tA\x01"
        case 28: // Recognized 'struct{WS}+{IDENTIFIER}{WS}*[^{\r\n]',	Shortest string "struct\tA\t"
        case 29: // Recognized 'struct{WS}+{IDENTIFIER}{WS}*[^{\r\n]',	Shortest string "struct\tA0"
Text.Append(Regex.Replace(yytext, @"struct\s+(\S+)", "$1"));
            break;
        case 30: // Recognized 'int{WS}+main',	Shortest string "int\tmain"
ContainsIMain = true; Text.Append(yytext);
            break;
        case 31: // Recognized '{CONST}?int{WS}+{IDENTIFIER}{WS}*\[[^\]]*\]{WS}*=',	Shortest string "int\tA[]="
Text.Append(Regex.Replace(yytext, @".*?int\s+(\S+)\s*\[.*?\]\s*=", "int[] $1 = new int[]"));
            break;
        case 32: // Recognized '{CONST}?char{WS}+{IDENTIFIER}{WS}*\[{WS}*\]{WS}*=',	Shortest string "char\tA[]="
Text.Append(Regex.Replace(yytext, @".*?char\s+(\S+)\s*\[.*?\]", "string $1"));
            break;
        case 33: // Recognized 'char{WS}+{IDENTIFIER}{WS}*\[[^\]]*\];',	Shortest string "char\tA[];"
Text.Append(Regex.Replace(yytext, @".*?char\s+(\S+)\s*\[(.*?)\]", "char[] $1 = new char[$2]"));
            break;
        case 34: // Recognized 'FILE{WS}*{STAR}',	Shortest string "FILE*"
Text.Append("C.FILE");
            break;
        case 35: // Recognized '{START_COMMENT}',	Shortest string "/*"
/*Text.Append("<cmt>");*/ Text.Append(yytext); yy_push_state(StreamComment);
            break;
        case 36: // Recognized '{LINE_COMMENT}',	Shortest string "//"
/*Text.Append("<cmt>");*/ Text.Append(yytext); yy_push_state(LineComment);
            break;
        case 37: // Recognized '{STAR}{WS}*\({WS}*{IDENTIFIER}{WS}*{STAR}{WS}*\)',	Shortest string "*(A*)"
/* remove casts */
            break;
        case 38: // Recognized '\({WS}*void{WS}*\)',	Shortest string "(void)"
Text.Append("()");
            break;
        case 39: // Recognized '&&',	Shortest string "&&"
Text.Append(yytext);
            break;
        case 40: // Recognized '&{WS}*{IDENTIFIER}',	Shortest string "&A"
Text.Append(Regex.Replace(yytext, @"&", "out "));
            break;
        case 41: // In <StringLiteral> Recognized '.',	Shortest string "\x01"
        case 43: // In <StringLiteral> Recognized '.',	Shortest string "\\"
Text.Append(yytext);
            break;
        case 42: // In <StringLiteral> Recognized '\"',	Shortest string "\""
Text.Append(yytext); /*Text.Append("</str>");*/ yy_pop_state();
            break;
        case 44: // In <StringLiteral> Recognized '\\\"',	Shortest string "\\\""
Text.Append(yytext);
            break;
        case 45: // In <LineComment> Recognized '.',	Shortest string "\x01"
Text.Append(yytext);
            break;
        case 46: // In <LineComment> Recognized '\n',	Shortest string "\n"
        case 47: // In <LineComment> Recognized '\r',	Shortest string "\r"
/*Text.Append("</cmt>");*/ Text.AppendLine(); yy_pop_state();
            break;
        case 48: // In <StreamComment> Recognized '.',	Shortest string "\x01"
        case 49: // In <StreamComment> Recognized '.',	Shortest string "*"
Text.Append(yytext);
            break;
        case 50: // In <StreamComment> Recognized '{END_COMMENT}',	Shortest string "*/"
Text.Append(yytext); /*Text.Append("</cmt>");*/ yy_pop_state();
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

public Boolean ContainsIMain = false;
	public Boolean ContainsVMain = false;
	public StringBuilder Text = new StringBuilder();

#endregion
    } // end class $Scanner


} // end namespace
