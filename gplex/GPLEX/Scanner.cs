//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.1.297
//  Machine:  RADNOR2
//  DateTime: 19/03/2009 10:09:12 AM
//  UserName: John Gough
//  GPLEX input file <gplex.lex>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: classes, noCompressMap, compressNext, persistBuffer, noEmbedBuffers
//

//
// Experimental embedded frame
// Version 1.1.0 of 11-February-2009
//
//
#define BACKUP
#define LEFTANCHORS
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;
using System.Collections;
using QUT.Gplex.Parser;

namespace QUT.Gplex.Lexer
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 109;
        const int initial = 110;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int SKIP = 1;
        const int RULES = 2;
        const int UCODE = 3;
        const int BCODE = 4;
        const int LCODE = 5;
        const int INDNT = 6;
        const int CMMNT = 7;
        const int SMACT = 8;
        const int XPEOL = 9;
        const int REGEX = 10;
        const int NMLST = 11;
        const int SPACE = 12;
        const int VRBTM = 13;
        const int PRGRP = 14;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {110, 113, 115, 122, 142, 144, 
        122, 60, 147, 149, 151, 163, 165, 167, 169, 0};

   static int[] anchorState = new int[] {111, 114, 116, 123, 143, 145, 
        146, 61, 148, 150, 152, 164, 166, 168, 170, 0};

#region CharacterMap
    static sbyte[] map = new sbyte[256] {
/*     '\0' */ 13, 23, 23, 23, 23, 23, 23, 13, 13, 3, 0, 13, 13, 4, 23, 23, 
/*   '\x10' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\x20' */ 16, 28, 15, 24, 23, 7, 24, 30, 33, 34, 8, 25, 11, 26, 32, 1, 
/*      '0' */ 18, 18, 18, 18, 18, 18, 18, 18, 6, 6, 24, 31, 29, 27, 12, 24, 
/*      '@' */ 24, 20, 20, 20, 20, 35, 37, 5, 5, 5, 5, 5, 5, 5, 5, 36, 
/*      'P' */ 5, 5, 5, 5, 5, 22, 5, 5, 5, 5, 5, 2, 14, 17, 23, 5, 
/*      '`' */ 23, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
/*      'p' */ 5, 5, 5, 5, 5, 21, 5, 5, 19, 5, 5, 9, 38, 10, 23, 23, 
/*   '\x80' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\x90' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xA0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xB0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xC0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xD0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xE0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
/*   '\xF0' */ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23 };
#endregion

    static Table[] NxS = new Table[176] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[   2] */ // Shortest string "^/"
      new Table(1, 8, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 14}),
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[   4] */ // Shortest string "\r"
      new Table(0, 1, -1, new short[] {1}),
/* NxS[   5] */ // Shortest string "^G"
      new Table(35, 27, -1, new short[] {5, 5, 5, -1, -1, -1, 
          -1, -1, -1, 5, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          5, 5, 5, 5, 5}),
/* NxS[   6] */ // Shortest string "^%"
      new Table(35, 27, -1, new short[] {7, 7, 7, -1, -1, -1, 
          -1, -1, -1, 7, -1, 8, -1, 9, 10, -1, -1, -1, -1, -1, -1, -1, 
          -1, 7, 7, 7, 7}),
/* NxS[   7] */ // Shortest string "^%G"
      new Table(35, 27, -1, new short[] {7, 7, 7, -1, -1, -1, 
          -1, -1, -1, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          7, 7, 7, 7, 7}),
/* NxS[   8] */ new Table(0, 0, -1, null), // Shortest string "^%%"
/* NxS[   9] */ new Table(0, 0, -1, null), // Shortest string "^%{"
/* NxS[  10] */ new Table(0, 0, -1, null), // Shortest string "^%}"
/* NxS[  11] */ new Table(0, 0, -1, null), // Shortest string "^\t/"
/* NxS[  12] */ // Shortest string "^\t%"
      new Table(7, 1, -1, new short[] {8}),
/* NxS[  13] */ // Shortest string "//"
      new Table(0, 5, 13, new short[] {-1, 13, 13, 13, -1}),
/* NxS[  14] */ // Shortest string "^/*"
      new Table(0, 9, 14, new short[] {-1, 14, 14, 14, -1, 14, 
          14, 14, 15}),
/* NxS[  15] */ // Shortest string "^/**"
      new Table(1, 8, -1, new short[] {16, -1, -1, -1, -1, -1, 
          -1, 15}),
/* NxS[  16] */ new Table(0, 0, -1, null), // Shortest string "^/**/"
/* NxS[  17] */ // Shortest string "/"
      new Table(1, 1, -1, new short[] {13}),
/* NxS[  18] */ // Shortest string "/"
      new Table(0, 5, 19, new short[] {-1, 13, 19, 19, -1}),
/* NxS[  19] */ // Shortest string "["
      new Table(0, 5, 19, new short[] {-1, 19, 19, 19, -1}),
/* NxS[  20] */ // Shortest string "^/"
      new Table(1, 8, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 25}),
/* NxS[  21] */ new Table(0, 0, -1, null), // Shortest string "^["
/* NxS[  22] */ // Shortest string "^%"
      new Table(7, 4, -1, new short[] {8, -1, 9, 10}),
/* NxS[  23] */ // Shortest string "^<"
      new Table(29, 1, -1, new short[] {117}),
/* NxS[  24] */ new Table(0, 0, -1, null), // Shortest string "^<<EOF>>"
/* NxS[  25] */ // Shortest string "/*"
      new Table(0, 9, 25, new short[] {-1, 25, 25, 25, -1, 25, 
          25, 25, 26}),
/* NxS[  26] */ // Shortest string "/**"
      new Table(1, 8, -1, new short[] {27, -1, -1, -1, -1, -1, 
          -1, 26}),
/* NxS[  27] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[  28] */ // Shortest string "/"
      new Table(1, 8, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 25}),
/* NxS[  29] */ // Shortest string "/"
      new Table(27, 21, -1, new short[] {40, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 25}),
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  31] */ // Shortest string "G"
      new Table(35, 27, -1, new short[] {31, 31, 31, -1, -1, -1, 
          -1, -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          31, 31, 31, 31, 31}),
/* NxS[  32] */ // Shortest string "8"
      new Table(6, 13, -1, new short[] {32, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 32}),
/* NxS[  33] */ // Shortest string "^%"
      new Table(7, 21, -1, new short[] {8, -1, -1, 52, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40}),
/* NxS[  34] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  37] */ // Shortest string ">"
      new Table(12, 16, -1, new short[] {40, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 40}),
/* NxS[  38] */ // Shortest string "\""
      new Table(0, 16, 139, new short[] {-1, 139, 139, -1, -1, 139, 
          139, 139, 139, 139, 139, 139, 139, -1, 140, 51}),
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string "]"
/* NxS[  40] */ new Table(0, 0, -1, null), // Shortest string "#"
/* NxS[  41] */ // Shortest string "+"
      new Table(25, 3, -1, new short[] {40, -1, 40}),
/* NxS[  42] */ // Shortest string "-"
      new Table(26, 2, -1, new short[] {40, 40}),
/* NxS[  43] */ // Shortest string "%"
      new Table(27, 1, -1, new short[] {40}),
/* NxS[  44] */ // Shortest string "<"
      new Table(27, 3, -1, new short[] {40, -1, 40}),
/* NxS[  45] */ // Shortest string "'"
      new Table(30, 24, 125, new short[] {-1, 125, 125, 125, 125, 125, 
          125, 125, 125, -1, 125, 125, -1, -1, 125, 125, 125, 125, 125, 125, 125, 125, 
          -1, 126}),
/* NxS[  46] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  47] */ new Table(0, 0, -1, null), // Shortest string "."
/* NxS[  48] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[  49] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[  50] */ new Table(0, 0, -1, null), // Shortest string "'/'"
/* NxS[  51] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "^%}"
/* NxS[  53] */ // Shortest string "^%"
      new Table(27, 20, -1, new short[] {40, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8}),
/* NxS[  54] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  55] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  56] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[  57] */ // Shortest string "\r"
      new Table(0, 1, -1, new short[] {56}),
/* NxS[  58] */ // Shortest string "^/"
      new Table(0, 5, 59, new short[] {-1, 13, 59, 59, -1}),
/* NxS[  59] */ // Shortest string "^["
      new Table(0, 5, 59, new short[] {-1, 59, 59, 59, -1}),
/* NxS[  60] */ // Shortest string ""
      new Table(0, 9, 63, new short[] {1, 62, 63, 63, 4, 63, 
          63, 63, 66}),
/* NxS[  61] */ // Shortest string "^"
      new Table(0, 17, 63, new short[] {1, 62, 63, 64, 4, 63, 
          63, 65, 66, 63, 63, 63, 63, 63, 63, 63, 64}),
/* NxS[  62] */ // Shortest string "/"
      new Table(0, 9, 63, new short[] {-1, 13, 63, 63, -1, 63, 
          63, 63, 66}),
/* NxS[  63] */ // Shortest string "["
      new Table(0, 9, 63, new short[] {-1, 63, 63, 63, -1, 63, 
          63, 63, 66}),
/* NxS[  64] */ // Shortest string "^\t"
      new Table(0, 17, 63, new short[] {-1, 63, 63, 64, -1, 63, 
          63, 65, 66, 63, 63, 63, 63, 63, 63, 63, 64}),
/* NxS[  65] */ // Shortest string "^%"
      new Table(0, 9, 63, new short[] {-1, 63, 63, 63, -1, 63, 
          63, 68, 66}),
/* NxS[  66] */ // Shortest string "*"
      new Table(1, 8, -1, new short[] {67, -1, -1, -1, -1, -1, 
          -1, 66}),
/* NxS[  67] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[  68] */ // Shortest string "^%%"
      new Table(0, 9, 63, new short[] {-1, 63, 63, 63, -1, 63, 
          63, 63, 66}),
/* NxS[  69] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[  70] */ // Shortest string "/"
      new Table(1, 1, -1, new short[] {13}),
/* NxS[  71] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[  72] */ // Shortest string "\r"
      new Table(0, 1, -1, new short[] {69}),
/* NxS[  73] */ // Shortest string "^%"
      new Table(7, 1, -1, new short[] {8}),
/* NxS[  74] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "|"
/* NxS[  76] */ // Shortest string "/"
      new Table(0, 5, 77, new short[] {-1, 13, 77, 77, -1}),
/* NxS[  77] */ // Shortest string "["
      new Table(0, 5, 77, new short[] {-1, 77, 77, 77, -1}),
/* NxS[  78] */ // Shortest string "/"
      new Table(0, 17, 80, new short[] {-1, 13, 155, -1, -1, 80, 
          80, 80, 80, 156, 80, 80, 80, 80, 157, 153, -1}),
/* NxS[  79] */ // Shortest string "["
      new Table(0, 18, 161, new short[] {-1, 161, 161, 161, -1, 161, 
          161, 161, 161, 161, 161, 161, 161, 161, 162, 161, 161, -1}),
/* NxS[  80] */ // Shortest string "G"
      new Table(0, 17, 80, new short[] {-1, 80, 155, -1, -1, 80, 
          80, 80, 80, 156, 80, 80, 80, 80, 157, 153, -1}),
/* NxS[  81] */ // Shortest string "^%"
      new Table(0, 17, 80, new short[] {-1, 80, 155, -1, -1, 80, 
          80, 85, 80, 156, 80, 80, 80, 80, 157, 153, -1}),
/* NxS[  82] */ // Shortest string "{"
      new Table(35, 27, -1, new short[] {158, 158, 158, -1, -1, -1, 
          -1, -1, -1, 158, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          159, 158, 158, 158, 158}),
/* NxS[  83] */ // Shortest string "\\"
      new Table(0, 5, 80, new short[] {-1, 80, 80, 80, -1}),
/* NxS[  84] */ // Shortest string "\""
      new Table(0, 16, 153, new short[] {-1, 153, 153, -1, -1, 153, 
          153, 153, 153, 153, 153, 153, 153, -1, 154, 80}),
/* NxS[  85] */ // Shortest string "^%%"
      new Table(0, 17, 80, new short[] {-1, 80, 155, -1, -1, 80, 
          80, 80, 80, 156, 80, 80, 80, 80, 157, 153, -1}),
/* NxS[  86] */ // Shortest string "^\t"
      new Table(3, 14, -1, new short[] {86, -1, -1, -1, 141, -1, 
          -1, -1, -1, -1, -1, -1, -1, 86}),
/* NxS[  87] */ // Shortest string "G"
      new Table(35, 27, -1, new short[] {87, 87, 87, -1, -1, -1, 
          -1, -1, -1, 87, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          87, 87, 87, 87, 87}),
/* NxS[  88] */ // Shortest string "8"
      new Table(6, 13, -1, new short[] {88, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 88}),
/* NxS[  89] */ // Shortest string "^%"
      new Table(7, 1, -1, new short[] {8}),
/* NxS[  90] */ new Table(0, 0, -1, null), // Shortest string "*"
/* NxS[  91] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  92] */ new Table(0, 0, -1, null), // Shortest string ">"
/* NxS[  93] */ // Shortest string "\t"
      new Table(3, 14, -1, new short[] {93, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 93}),
/* NxS[  94] */ new Table(0, 0, -1, null), // Shortest string ""
/* NxS[  95] */ // Shortest string "/"
      new Table(0, 17, 96, new short[] {-1, 13, 96, -1, -1, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1}),
/* NxS[  96] */ // Shortest string "["
      new Table(0, 17, 96, new short[] {-1, 96, 96, -1, -1, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, -1}),
/* NxS[  97] */ // Shortest string "^\t"
      new Table(3, 14, -1, new short[] {97, -1, -1, -1, 141, -1, 
          -1, -1, -1, -1, -1, -1, -1, 97}),
/* NxS[  98] */ // Shortest string "\r"
      new Table(0, 1, -1, new short[] {94}),
/* NxS[  99] */ // Shortest string "\t"
      new Table(3, 14, -1, new short[] {99, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 99}),
/* NxS[ 100] */ // Shortest string "/"
      new Table(0, 5, 101, new short[] {-1, 13, 101, 101, -1}),
/* NxS[ 101] */ // Shortest string "["
      new Table(0, 5, 101, new short[] {-1, 101, 101, 101, -1}),
/* NxS[ 102] */ // Shortest string "\t"
      new Table(0, 17, 101, new short[] {-1, 101, 101, 102, -1, 101, 
          101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102}),
/* NxS[ 103] */ // Shortest string "/"
      new Table(1, 8, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, 25}),
/* NxS[ 104] */ new Table(0, 0, -1, null), // Shortest string "["
/* NxS[ 105] */ // Shortest string "^\t"
      new Table(3, 14, -1, new short[] {105, -1, -1, -1, 141, -1, 
          -1, -1, -1, -1, -1, -1, -1, 105}),
/* NxS[ 106] */ // Shortest string "^%"
      new Table(7, 1, -1, new short[] {8}),
/* NxS[ 107] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[ 108] */ // Shortest string "<"
      new Table(29, 1, -1, new short[] {171}),
/* NxS[ 109] */ new Table(0, 0, -1, null), // Shortest string "<<EOF>>"
/* NxS[ 110] */ // Shortest string ""
      new Table(0, 17, 3, new short[] {1, 17, 3, -1, 4, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1}),
/* NxS[ 111] */ // Shortest string "^"
      new Table(35, 27, 3, new short[] {5, 5, 5, 3, 1, 2, 
          3, 112, 4, 5, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 112, 3, 
          3, 5, 5, 5, 5}),
/* NxS[ 112] */ // Shortest string "^\t"
      new Table(0, 17, 11, new short[] {-1, 11, 11, 112, -1, 11, 
          11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 112}),
/* NxS[ 113] */ // Shortest string ""
      new Table(0, 5, 19, new short[] {1, 18, 19, 19, 4}),
/* NxS[ 114] */ // Shortest string "^"
      new Table(0, 5, 19, new short[] {1, 18, 19, 19, 4}),
/* NxS[ 115] */ // Shortest string ""
      new Table(0, 17, 3, new short[] {1, 28, 3, -1, 4, 3, 
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1}),
/* NxS[ 116] */ // Shortest string "^"
      new Table(29, 27, 21, new short[] {23, 21, 21, 21, 21, 21, 
          21, 21, 21, 21, 1, 20, 21, 112, 4, 21, 21, 22, 21, 21, 21, 21, 
          21, 21, 21, 21, 112}),
/* NxS[ 117] */ // Shortest string "^<<"
      new Table(35, 1, -1, new short[] {118}),
/* NxS[ 118] */ // Shortest string "^<<E"
      new Table(36, 1, -1, new short[] {119}),
/* NxS[ 119] */ // Shortest string "^<<EO"
      new Table(37, 1, -1, new short[] {120}),
/* NxS[ 120] */ // Shortest string "^<<EOF"
      new Table(12, 1, -1, new short[] {121}),
/* NxS[ 121] */ // Shortest string "^<<EOF>"
      new Table(12, 1, -1, new short[] {24}),
/* NxS[ 122] */ // Shortest string ""
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 1, 29, 30, -1, 4, 31, 
          32, 43, 43, 34, 35, 36, 37, 3, 3, 38, -1, 39, 32}),
/* NxS[ 123] */ // Shortest string "^"
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 1, 29, 30, 124, 4, 31, 
          32, 33, 43, 34, 35, 36, 37, 3, 3, 38, 124, 39, 32}),
/* NxS[ 124] */ // Shortest string "^\t"
      new Table(3, 14, -1, new short[] {124, -1, -1, -1, 141, -1, 
          -1, -1, -1, -1, -1, -1, -1, 124}),
/* NxS[ 125] */ // Shortest string "'/"
      new Table(30, 1, -1, new short[] {50}),
/* NxS[ 126] */ // Shortest string "'\\"
      new Table(0, 23, 125, new short[] {-1, 125, 125, 125, -1, 125, 
          125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 127, 128, 125, 129, 
          130}),
/* NxS[ 127] */ // Shortest string "'\\0"
      new Table(18, 13, -1, new short[] {138, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 50}),
/* NxS[ 128] */ // Shortest string "'\\x"
      new Table(18, 28, -1, new short[] {137, -1, 137, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 137, -1, 137, -1, -1, 
          -1, -1, -1, -1, -1, 137}),
/* NxS[ 129] */ // Shortest string "'\\u"
      new Table(18, 28, -1, new short[] {135, -1, 135, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 135, -1, 135, -1, -1, 
          -1, -1, -1, -1, -1, 135}),
/* NxS[ 130] */ // Shortest string "'\\U"
      new Table(18, 28, -1, new short[] {131, -1, 131, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 131, -1, 131, -1, -1, 
          -1, -1, -1, -1, -1, 131}),
/* NxS[ 131] */ // Shortest string "'\\U8"
      new Table(35, 25, -1, new short[] {132, -1, 132, -1, -1, -1, 
          -1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          132, -1, 132}),
/* NxS[ 132] */ // Shortest string "'\\U88"
      new Table(35, 25, -1, new short[] {133, -1, 133, -1, -1, -1, 
          -1, -1, -1, -1, 133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          133, -1, 133}),
/* NxS[ 133] */ // Shortest string "'\\U888"
      new Table(35, 25, -1, new short[] {134, -1, 134, -1, -1, -1, 
          -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          134, -1, 134}),
/* NxS[ 134] */ // Shortest string "'\\U8888"
      new Table(35, 25, -1, new short[] {135, -1, 135, -1, -1, -1, 
          -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          135, -1, 135}),
/* NxS[ 135] */ // Shortest string "'\\u8"
      new Table(35, 25, -1, new short[] {136, -1, 136, -1, -1, -1, 
          -1, -1, -1, -1, 136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          136, -1, 136}),
/* NxS[ 136] */ // Shortest string "'\\u88"
      new Table(35, 25, -1, new short[] {137, -1, 137, -1, -1, -1, 
          -1, -1, -1, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          137, -1, 137}),
/* NxS[ 137] */ // Shortest string "'\\x8"
      new Table(35, 25, -1, new short[] {125, -1, 125, -1, -1, -1, 
          -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          125, -1, 125}),
/* NxS[ 138] */ // Shortest string "'\\00"
      new Table(18, 1, -1, new short[] {125}),
/* NxS[ 139] */ // Shortest string "\"/"
      new Table(0, 16, 139, new short[] {-1, 139, 139, -1, -1, 139, 
          139, 139, 139, 139, 139, 139, 139, -1, 140, 51}),
/* NxS[ 140] */ // Shortest string "\"\\"
      new Table(0, 5, 139, new short[] {-1, 139, 139, 139, -1}),
/* NxS[ 141] */ // Shortest string "^\t%"
      new Table(7, 1, -1, new short[] {8}),
/* NxS[ 142] */ // Shortest string ""
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 1, 29, 30, -1, 4, 31, 
          32, 43, 43, 54, 55, 36, 37, 3, 3, 38, -1, 39, 32}),
/* NxS[ 143] */ // Shortest string "^"
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 1, 29, 30, 124, 4, 31, 
          32, 53, 43, 54, 55, 36, 37, 3, 3, 38, 124, 39, 32}),
/* NxS[ 144] */ // Shortest string ""
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 56, 29, 30, -1, 57, 31, 
          32, 43, 43, 34, 35, 36, 37, 3, 3, 38, -1, 39, 32}),
/* NxS[ 145] */ // Shortest string "^"
      new Table(23, 35, 31, new short[] {3, 40, 41, 42, 43, 43, 
          44, 45, 46, 47, 48, 49, 31, 31, 31, 40, 56, 29, 30, 124, 57, 31, 
          32, 53, 43, 34, 35, 36, 37, 3, 3, 38, 124, 39, 32}),
/* NxS[ 146] */ // Shortest string "^"
      new Table(0, 17, 59, new short[] {1, 58, 59, 124, 4, 59, 
          59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 124}),
/* NxS[ 147] */ // Shortest string ""
      new Table(38, 18, 71, new short[] {75, 69, 70, 71, -1, 72, 
          71, 71, 71, 71, 74, 71, 71, 71, 71, 71, 71, -1}),
/* NxS[ 148] */ // Shortest string "^"
      new Table(38, 18, 71, new short[] {75, 69, 70, 71, 124, 72, 
          71, 71, 73, 71, 74, 71, 71, 71, 71, 71, 71, 124}),
/* NxS[ 149] */ // Shortest string ""
      new Table(0, 17, 77, new short[] {56, 76, 77, -1, 57, 77, 
          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, -1}),
/* NxS[ 150] */ // Shortest string "^"
      new Table(0, 17, 77, new short[] {56, 76, 77, 124, 57, 77, 
          77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 124}),
/* NxS[ 151] */ // Shortest string ""
      new Table(0, 17, 80, new short[] {1, 78, 79, -1, 4, 80, 
          80, 80, 80, 82, 80, 80, 80, 80, 83, 84, -1}),
/* NxS[ 152] */ // Shortest string "^"
      new Table(0, 17, 80, new short[] {1, 78, 79, 124, 4, 80, 
          80, 81, 80, 82, 80, 80, 80, 80, 83, 84, 124}),
/* NxS[ 153] */ // Shortest string "/\""
      new Table(0, 16, 153, new short[] {-1, 153, 153, -1, -1, 153, 
          153, 153, 153, 153, 153, 153, 153, -1, 154, 80}),
/* NxS[ 154] */ // Shortest string "\"\\"
      new Table(0, 5, 153, new short[] {-1, 153, 153, 153, -1}),
/* NxS[ 155] */ // Shortest string "/["
      new Table(0, 18, 161, new short[] {-1, 161, 161, 161, -1, 161, 
          161, 161, 161, 161, 161, 161, 161, 161, 162, 161, 161, -1}),
/* NxS[ 156] */ // Shortest string "/{"
      new Table(35, 27, -1, new short[] {158, 158, 158, -1, -1, -1, 
          -1, -1, -1, 158, 159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          159, 158, 158, 158, 158}),
/* NxS[ 157] */ // Shortest string "/\\"
      new Table(0, 5, 80, new short[] {-1, 80, 80, 80, -1}),
/* NxS[ 158] */ // Shortest string "{G"
      new Table(35, 27, -1, new short[] {158, 158, 158, -1, -1, -1, 
          -1, -1, -1, 158, 158, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, 
          158, 158, 158, 158, 158}),
/* NxS[ 159] */ // Shortest string "{8"
      new Table(6, 13, -1, new short[] {159, -1, -1, -1, 80, 160, 
          -1, -1, -1, -1, -1, -1, 159}),
/* NxS[ 160] */ // Shortest string "{8,"
      new Table(6, 13, -1, new short[] {160, -1, -1, -1, 80, -1, 
          -1, -1, -1, -1, -1, -1, 160}),
/* NxS[ 161] */ // Shortest string "[/"
      new Table(0, 18, 161, new short[] {-1, 161, 161, 161, -1, 161, 
          161, 161, 161, 161, 161, 161, 161, 161, 162, 161, 161, 80}),
/* NxS[ 162] */ // Shortest string "[\\"
      new Table(0, 5, 161, new short[] {-1, 161, 161, 161, -1}),
/* NxS[ 163] */ // Shortest string ""
      new Table(35, 27, 3, new short[] {87, 87, 87, 3, 56, 17, 
          3, 93, 57, 87, 88, 3, 90, 3, 3, 91, 92, 3, 3, 3, 93, 3, 
          88, 87, 87, 87, 87}),
/* NxS[ 164] */ // Shortest string "^"
      new Table(35, 27, 3, new short[] {87, 87, 87, 3, 56, 17, 
          3, 86, 57, 87, 88, 89, 90, 3, 3, 91, 92, 3, 3, 3, 86, 3, 
          88, 87, 87, 87, 87}),
/* NxS[ 165] */ // Shortest string ""
      new Table(0, 17, 96, new short[] {94, 95, 96, 99, 98, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 99}),
/* NxS[ 166] */ // Shortest string "^"
      new Table(0, 17, 96, new short[] {94, 95, 96, 97, 98, 96, 
          96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97}),
/* NxS[ 167] */ // Shortest string ""
      new Table(0, 17, 101, new short[] {56, 100, 101, 102, 57, 101, 
          101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102}),
/* NxS[ 168] */ // Shortest string "^"
      new Table(0, 17, 101, new short[] {56, 100, 101, 102, 57, 101, 
          101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102}),
/* NxS[ 169] */ // Shortest string ""
      new Table(29, 27, 104, new short[] {108, 104, 104, 104, 104, 104, 
          104, 104, 104, 104, 1, 103, 104, -1, 4, 104, 104, 104, 104, 104, 107, 104, 
          104, 104, 104, 104, -1}),
/* NxS[ 170] */ // Shortest string "^"
      new Table(29, 27, 104, new short[] {108, 104, 104, 104, 104, 104, 
          104, 104, 104, 104, 1, 103, 104, 105, 4, 104, 104, 106, 104, 104, 107, 104, 
          104, 104, 104, 104, 105}),
/* NxS[ 171] */ // Shortest string "<<"
      new Table(35, 1, -1, new short[] {172}),
/* NxS[ 172] */ // Shortest string "<<E"
      new Table(36, 1, -1, new short[] {173}),
/* NxS[ 173] */ // Shortest string "<<EO"
      new Table(37, 1, -1, new short[] {174}),
/* NxS[ 174] */ // Shortest string "<<EOF"
      new Table(12, 1, -1, new short[] {175}),
/* NxS[ 175] */ // Shortest string "<<EOF>"
      new Table(12, 1, -1, new short[] {109}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = map[code] - NxS[state].min;
            if (idx < 0) idx += 39;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file); // no unicode option
        }
        
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + (code & 0x3FF << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

#if !NOFILES        
        // ================ LineBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get
            {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
                {
                    int ch;
                    int count = 0;
                    buffer.Pos = tokPos;
                    do
                    {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile); 
                    return count;
                }
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 60:
Error(60, comStart);
                    break;
            }
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '{Eol}',	Shortest string ""
        case 4: // Recognized '{Eol}',	Shortest string "\r"
ResetBadCount(); return (int)Tokens.EOL;
            break;
        case 2: // Recognized '{NotWh}',	Shortest string "^/"
        case 3: // Recognized '{NotWh}',	Shortest string "["
        case 6: // Recognized '{NotWh}',	Shortest string "^%"
        case 17: // Recognized '{NotWh}',	Shortest string "/"
        case 28: // In <RULES> Recognized '{NotWh}',	Shortest string "/"
        case 38: // In <UCODE> Recognized '{NotWh}',	Shortest string "\""
        case 45: // In <UCODE> Recognized '{NotWh}',	Shortest string "'"
        case 79: // In <REGEX> Recognized '{NotWh}',	Shortest string "["
        case 83: // In <REGEX> Recognized '{NotWh}',	Shortest string "\\"
        case 84: // In <REGEX> Recognized '{NotWh}',	Shortest string "\""
        case 89: // In <NMLST> Recognized '{NotWh}',	Shortest string "^%"
Error79(TokenSpan()); return (int)Tokens.repErr;
            break;
        case 5: // Recognized '^{Ident}',	Shortest string "^G"
yy_push_state(REGEX); 
                         yy_push_state(SPACE); 
                         return (int)Tokens.name;
            break;
        case 7: // Recognized '^%{Ident}',	Shortest string "^%G"
return (int)GetTagToken(yytext);
            break;
        case 8: // Recognized '^{Space}*%%',	Shortest string "^%%"
        case 68: // In <CMMNT> Recognized '^{Space}*%%',	Shortest string "^%%"
        case 85: // In <REGEX> Recognized '^{Space}*%%',	Shortest string "^%%"
if (yytext.Length > 2)
                             Error(90, TokenSpan());
                         while (scStack.Count > 0) 
                             yy_pop_state();
                         if (YY_START == 0)
                             BEGIN(RULES);
                         else
                             BEGIN(UCODE); 
                         yy_push_state(XPEOL); 
                         return (int)Tokens.PCPC;
            break;
        case 9: // Recognized '^%\{',	Shortest string "^%{"
yy_push_state(UCODE); yy_push_state(XPEOL); return (int)Tokens.lPcBrace;
            break;
        case 10: // Recognized '^%\}',	Shortest string "^%}"
return (int)Tokens.rPcBrace; /* error! */
            break;
        case 11: // Recognized '^{Space}+/{NotWh}',	Shortest string "^\t/"
        case 12: // Recognized '^{Space}+/{NotWh}',	Shortest string "^\t%"
_yytrunc(1); 
yy_push_state(INDNT); return (int)Tokens.lxIndent;
            break;
        case 13: // Recognized '{OneLineCmnt}',	Shortest string "//"
return (int)Tokens.csCommentL;
            break;
        case 14: // Recognized '^{CmntStrt}{ABStar}\**',	Shortest string "^/*"
        case 15: // Recognized '^{CmntStrt}{ABStar}\**',	Shortest string "^/**"
yy_push_state(CMMNT); 
                         comStart = TokenSpan(); 
                         return (int)Tokens.defCommentS;
            break;
        case 16: // Recognized '^{CmntStrt}{ABStar}\**{CmntEnd}',	Shortest string "^/**/"
return (int)Tokens.defCommentE;
            break;
        case 18: // In <SKIP> Recognized '{DotChr}+',	Shortest string "/"
        case 19: // In <SKIP> Recognized '{DotChr}+',	Shortest string "["
yy_pop_state();
            break;
        case 20: // In <RULES> Recognized '^{NotWh}',	Shortest string "^/"
        case 21: // In <RULES> Recognized '^{NotWh}',	Shortest string "^["
        case 22: // In <RULES> Recognized '^{NotWh}',	Shortest string "^%"
yy_push_state(REGEX); 
                       yyless(0);
            break;
        case 23: // In <RULES> Recognized '^<',	Shortest string "^<"
yy_push_state(REGEX); 
                       yy_push_state(NMLST); 
                       return (int)Tokens.lCond;
            break;
        case 24: // In <RULES> Recognized '^"<<EOF>>"',	Shortest string "^<<EOF>>"
yy_push_state(SMACT); 
                       yy_push_state(SPACE); 
                       return (int)Tokens.pattern;
            break;
        case 25: // In <RULES> Recognized '{CmntStrt}{ABStar}\**',	Shortest string "/*"
        case 26: // In <RULES> Recognized '{CmntStrt}{ABStar}\**',	Shortest string "/**"
yy_push_state(CMMNT);
                       comStart = TokenSpan(); 
                       return (int)Tokens.csCommentS;
            break;
        case 27: // In <RULES> Recognized '{CmntStrt}{ABStar}\**{CmntEnd}',	Shortest string "/**/"
return (int)Tokens.csCommentE;
            break;
        case 29: // In <UCODE> Recognized '{CShOps}',	Shortest string "/"
        case 33: // In <UCODE> Recognized '{CShOps}',	Shortest string "^%"
        case 37: // In <UCODE> Recognized '{CShOps}',	Shortest string ">"
        case 40: // In <UCODE> Recognized '{CShOps}',	Shortest string "#"
        case 41: // In <UCODE> Recognized '{CShOps}',	Shortest string "+"
        case 42: // In <UCODE> Recognized '{CShOps}',	Shortest string "-"
        case 43: // In <UCODE> Recognized '{CShOps}',	Shortest string "%"
        case 44: // In <UCODE> Recognized '{CShOps}',	Shortest string "<"
        case 53: // In <BCODE> Recognized '{CShOps}',	Shortest string "^%"
return (int)Tokens.csOp;
            break;
        case 30: // In <UCODE> Recognized '\[',	Shortest string "["
return (int)Tokens.csLBrac;
            break;
        case 31: // In <UCODE> Recognized '{Ident}',	Shortest string "G"
return (int)GetIdToken(yytext);
            break;
        case 32: // In <UCODE> Recognized '{Number}',	Shortest string "8"
return (int)Tokens.csNumber;
            break;
        case 34: // In <UCODE> Recognized '\{',	Shortest string "{"
return (int)Tokens.csLBrace;
            break;
        case 35: // In <UCODE> Recognized '\}',	Shortest string "}"
return (int)Tokens.csRBrace;
            break;
        case 36: // In <UCODE> Recognized ',',	Shortest string ","
return (int)Tokens.comma;
            break;
        case 39: // In <UCODE> Recognized '\]',	Shortest string "]"
return (int)Tokens.csRBrac;
            break;
        case 46: // In <UCODE> Recognized ';',	Shortest string ";"
return (int)Tokens.semi;
            break;
        case 47: // In <UCODE> Recognized '\.',	Shortest string "."
return (int)Tokens.csDot;
            break;
        case 48: // In <UCODE> Recognized '\(',	Shortest string "("
return (int)Tokens.csLPar;
            break;
        case 49: // In <UCODE> Recognized '\)',	Shortest string ")"
return (int)Tokens.csRPar;
            break;
        case 50: // In <UCODE> Recognized '{LitChr}',	Shortest string "'/'"
return (int)Tokens.csLitchr;
            break;
        case 51: // In <UCODE> Recognized '{LitStr}',	Shortest string "\"\""
return (int)Tokens.csLitstr;
            break;
        case 52: // In <UCODE> Recognized '^%\}',	Shortest string "^%}"
yy_pop_state(); yy_push_state(XPEOL); return (int)Tokens.rPcBrace;
            break;
        case 54: // In <BCODE> Recognized '\{',	Shortest string "{"
depth++; return (int)Tokens.csLBrace;
            break;
        case 55: // In <BCODE> Recognized '\}',	Shortest string "}"
if (depth > 0) { depth--; return (int)Tokens.csRBrace; }
                            else           { yy_pop_state(); return (int)Tokens.lxRBrace; }
            break;
        case 56: // In <LCODE> Recognized '{Eol}',	Shortest string ""
        case 57: // In <LCODE> Recognized '{Eol}',	Shortest string "\r"
yy_pop_state(); ResetBadCount(); return (int)Tokens.EOL;
            break;
        case 58: // In <INDNT> Recognized '^{NotWh}{DotChr}*',	Shortest string "^/"
        case 59: // In <INDNT> Recognized '^{NotWh}{DotChr}*',	Shortest string "^["
yy_pop_state(); yyless(0); return (int)Tokens.lxEndIndent;
            break;
        case 60: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string ""
        case 61: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "^"
        case 62: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "/"
        case 63: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "["
        case 64: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "^\t"
        case 65: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "^%"
        case 66: // In <CMMNT> Recognized '{ABStar}\**',	Shortest string "*"
return (int)Tokens.csCommentS;
            break;
        case 67: // In <CMMNT> Recognized '{ABStar}\**{CmntEnd}',	Shortest string "*/"
yy_pop_state(); return (int)Tokens.csCommentE;
            break;
        case 69: // In <SMACT> Recognized '{Eol}',	Shortest string ""
        case 72: // In <SMACT> Recognized '{Eol}',	Shortest string "\r"
yy_pop_state(); 
                       Error(89, TokenSpan()); 
                       return (int)Tokens.csOp;
            break;
        case 70: // In <SMACT> Recognized '{NotWh}',	Shortest string "/"
        case 71: // In <SMACT> Recognized '{NotWh}',	Shortest string "["
        case 73: // In <SMACT> Recognized '{NotWh}',	Shortest string "^%"
yy_pop_state(); 
                       yy_push_state(LCODE); 
                       yyless(0);
            break;
        case 74: // In <SMACT> Recognized '\{',	Shortest string "{"
yy_pop_state(); 
                       yy_push_state(BCODE); 
                       depth = 0; 
                       return (int)Tokens.lxLBrace;
            break;
        case 75: // In <SMACT> Recognized '\|',	Shortest string "|"
yy_pop_state(); return (int)Tokens.lxBar;
            break;
        case 76: // In <XPEOL> Recognized '{NotWh}{DotChr}*',	Shortest string "/"
        case 77: // In <XPEOL> Recognized '{NotWh}{DotChr}*',	Shortest string "["
Error(80, TokenSpan()); return (int)Tokens.repErr;
            break;
        case 78: // In <REGEX> Recognized '{Regex}+',	Shortest string "/"
        case 80: // In <REGEX> Recognized '{Regex}+',	Shortest string "G"
        case 81: // In <REGEX> Recognized '{Regex}+',	Shortest string "^%"
yy_pop_state();
                       switch (YY_START) {
                           case INITIAL:
                               yy_push_state(XPEOL); break;
                           case RULES:
                           case PRGRP:
                               yy_push_state(SMACT);
                               yy_push_state(SPACE); break;
                       } 
                       return (int)Tokens.pattern;
            break;
        case 82: // In <REGEX> Recognized '\{',	Shortest string "{"
yy_pop_state();
                       if (YY_START == RULES || YY_START == PRGRP) {
                           yy_push_state(PRGRP);
                           yy_push_state(XPEOL);
                           return (int)Tokens.lxLBrace;
                       } else {
                           Error79(TokenSpan());
                           return (int)Tokens.repErr;
                       }
            break;
        case 86: // In <NMLST> Recognized '{Space}+',	Shortest string "^\t"
        case 93: // In <NMLST> Recognized '{Space}+',	Shortest string "\t"
/* skip */
            break;
        case 87: // In <NMLST> Recognized '{Ident}',	Shortest string "G"
return (int)Tokens.name;
            break;
        case 88: // In <NMLST> Recognized '{Number}',	Shortest string "8"
return (int)Tokens.csNumber;
            break;
        case 90: // In <NMLST> Recognized '\*',	Shortest string "*"
return (int)Tokens.csStar;
            break;
        case 91: // In <NMLST> Recognized ',',	Shortest string ","
return (int)Tokens.comma;
            break;
        case 92: // In <NMLST> Recognized '>',	Shortest string ">"
yy_pop_state(); 
                       return (int)Tokens.rCond;
            break;
        case 94: // In <SPACE> Recognized '{Eol}',	Shortest string ""
        case 98: // In <SPACE> Recognized '{Eol}',	Shortest string "\r"
yy_pop_state(); Error(78, TokenSpan()); return (int)Tokens.EOL;
            break;
        case 95: // In <SPACE> Recognized '{NotWh}+',	Shortest string "/"
        case 96: // In <SPACE> Recognized '{NotWh}+',	Shortest string "["
Error(78, TokenSpan()); return (int)Tokens.repErr;
            break;
        case 97: // In <SPACE> Recognized '{Space}+',	Shortest string "^\t"
        case 99: // In <SPACE> Recognized '{Space}+',	Shortest string "\t"
yy_pop_state();
            break;
        case 100: // In <VRBTM> Recognized '{DotChr}+',	Shortest string "/"
        case 101: // In <VRBTM> Recognized '{DotChr}+',	Shortest string "["
yy_pop_state(); return (int)Tokens.verbatim;
            break;
        case 102: // In <VRBTM> Recognized '{Space}+',	Shortest string "\t"
/* skip */
            break;
        case 103: // In <PRGRP> Recognized '{NotWh}',	Shortest string "/"
        case 104: // In <PRGRP> Recognized '{NotWh}',	Shortest string "["
        case 106: // In <PRGRP> Recognized '{NotWh}',	Shortest string "^%"
yy_push_state(REGEX); yyless(0);
            break;
        case 105: // In <PRGRP> Recognized '^{Space}+',	Shortest string "^\t"
/* skip */
            break;
        case 107: // In <PRGRP> Recognized '\}',	Shortest string "}"
yy_pop_state();
                       yy_push_state(XPEOL);
                       return (int)Tokens.lxRBrace;
            break;
        case 108: // In <PRGRP> Recognized '\<',	Shortest string "<"
yy_push_state(REGEX); 
                       yy_push_state(NMLST); 
                       return (int)Tokens.lCond;
            break;
        case 109: // In <PRGRP> Recognized '"<<EOF>>"',	Shortest string "<<EOF>>"
yy_push_state(SMACT); 
                       yy_push_state(SPACE); 
                       return (int)Tokens.pattern;
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
            } // end try
            finally {
// User-specified epilog to scan()
/* Epilog from LEX file */
	yylloc = new LexSpan(tokLin, tokCol, tokELin, tokECol, tokPos, tokEPos, buffer);
// End, user-specified epilog
            } // end finally
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

/*  User code is in ParseHelper.cs  */

#endregion
    } // end class $Scanner


} // end namespace